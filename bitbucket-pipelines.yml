image: openjdk:17-jdk-alpine

pipelines:
  default:
    - step:
        name: 도커 이미지 빌드 및 푸시
        caches:
          - gradle
          - docker
        services:
          - docker
        script:
          - apk add --no-cache wget
          - wget --post-data '{"text":"도커 이미지 빌드 및 푸시 시작"}' --header="Content-Type:application/json" ${SLACK_WEBHOOK}
          - echo "=== Gradle 클린 빌드 ==="
          - ./gradlew clean build -x test
          - echo "=== 빌드 아티팩트 ==="
          - ls -al build/libs
          - export JAR_FILE=$(ls build/libs | grep -v 'plain' | grep '.jar' | head -n 1) # plain JAR 제외
          - echo "빌드된 JAR 파일:" + $JAR_FILE
          - export APP_NAME=$(echo $APP_NAME | tr '[:upper:]' '[:lower:]') # APP_NAME을 소문자로 변환
          - echo "=== Docker 로그인 ==="
          - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
          - echo "=== Docker 이미지 빌드 ==="
          - docker build --build-arg JAR_FILE=build/libs/$JAR_FILE -t $DOCKERHUB_USERNAME/$APP_NAME:latest .
          - echo "=== 빌드된 Docker 이미지 ==="
          - docker images | grep $APP_NAME
          - echo "=== Docker 이미지 푸시 ==="
          - docker push $DOCKERHUB_USERNAME/$APP_NAME
          - wget --post-data '{"text":"도커 이미지 빌드 및 푸시 완료"}' --header="Content-Type:application/json" ${SLACK_WEBHOOK}

    # Blue 컨테이너에 배포
    - step:
        name: Blue 컨테이너에 배포
        script:
          - echo "=== OpenSSH 클라이언트 설치 ==="
          - apk add --no-cache openssh-client
          - echo "=== SSH 키 설정 ==="
          - mkdir -p ~/.ssh
          - echo "$ENCODED_SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/id_rsa
          - chmod 600 ~/.ssh/id_rsa
          - echo "=== SSH 키 내용 확인 ==="
          - cat ~/.ssh/id_rsa
          - echo "=== 동일 서버에서 Blue 컨테이너 배포 ==="
          - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker pull ${DOCKERHUB_USERNAME}/${APP_NAME}"
          - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker stop ${APP_NAME}-blue || true"
          - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker rm ${APP_NAME}-blue || true"
          - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker run --env-file /home/ubuntu/.env -d --name ${APP_NAME}-blue -p 8080:8080 ${DOCKERHUB_USERNAME}/${APP_NAME}:latest"
          - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker ps -a"
          - wget --post-data '{"text":"Blue 컨테이너 배포 완료"}' --header="Content-Type:application/json" ${SLACK_WEBHOOK}

    # Green 컨테이너에 배포
    - step:
        name: Green 컨테이너에 배포
        script:
          - echo "=== 동일 서버에서 Green 컨테이너 배포 ==="
          - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker pull ${DOCKERHUB_USERNAME}/${APP_NAME}"
          - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker stop ${APP_NAME}-green || true"
          - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker rm ${APP_NAME}-green || true"
          - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker run --env-file /home/ubuntu/.env -d --name ${APP_NAME}-green -p 8081:8080 ${DOCKERHUB_USERNAME}/${APP_NAME}:latest"
          - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker ps -a"
          - wget --post-data '{"text":"Green 컨테이너 배포 완료"}' --header="Content-Type:application/json" ${SLACK_WEBHOOK}