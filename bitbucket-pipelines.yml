image: openjdk:17-jdk-alpine

pipelines:
  branches:
    "test":
      - step:
          name: 도커 이미지 빌드 및 푸시
          caches:
            - gradle
            - docker
          services:
            - docker
          script:
            - apk add --no-cache wget
            - wget --post-data '{"text":"도커 이미지 빌드 및 푸시 시작"}' --header="Content-Type:application/json" ${SLACK_WEBHOOK}
            - echo "=== Gradle 클린 빌드 ==="
            - ./gradlew clean build -x test
            - echo "=== 빌드 아티팩트 ==="
            - ls -al build/libs
            - export JAR_FILE=$(ls build/libs | grep -v 'plain' | grep '.jar' | head -n 1)
            - echo "빌드된 JAR 파일:" + $JAR_FILE
            - echo "=== Docker 로그인 ==="
            - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            - echo "=== Docker 이미지 빌드 ==="
            - docker build --build-arg JAR_FILE=build/libs/$JAR_FILE -t $DOCKERHUB_USERNAME/$APP_NAME:latest .
            - echo "=== 빌드된 Docker 이미지 ==="
            - docker images | grep $APP_NAME
            - echo "=== Docker 이미지 푸시 ==="
            - docker push $DOCKERHUB_USERNAME/$APP_NAME
            - wget --post-data '{"text":"도커 이미지 빌드 및 푸시 완료"}' --header="Content-Type:application/json" ${SLACK_WEBHOOK}

      - step:
          name: Green 컨테이너에 배포
          script:
            - echo "=== OpenSSH 클라이언트 설치 ==="
            - apk add --no-cache openssh-client
            - echo "=== SSH 키 설정 ==="
            - mkdir -p ~/.ssh
            - echo "$ENCODED_SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/id_rsa
            - chmod 600 ~/.ssh/id_rsa
            - echo "=== SSH 키 내용 확인 ==="
            - cat ~/.ssh/id_rsa
            - echo "=== EC2의 SSH 키 스캔 ==="
            - ssh-keyscan -H "${SERVER_IP}" >> ~/.ssh/known_hosts
            - echo "=== Green 컨테이너 중지 및 삭제 ==="
            - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker stop artfusion-green"
            - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker rm artfusion-green"
            - echo "=== Green 컨테이너 배포 ==="
            - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker-compose -f /home/ubuntu/artfusion-deployment/docker-compose.yml up -d artfusion-green"
            - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "bash /home/ubuntu/artfusion-deployment/nginx_to_green.sh"
            - wget --post-data '{"text":"Green 컨테이너 배포 완료"}' --header="Content-Type:application/json" ${SLACK_WEBHOOK}

      - step:
          name: Blue 컨테이너에 배포
          trigger: manual
          script:
            - echo "=== OpenSSH 클라이언트 설치 ==="
            - apk add --no-cache openssh-client
            - echo "=== SSH 키 설정 ==="
            - mkdir -p ~/.ssh
            - echo "$ENCODED_SSH_PRIVATE_KEY" | base64 -d > ~/.ssh/id_rsa
            - chmod 600 ~/.ssh/id_rsa
            - echo "=== SSH 키 내용 확인 ==="
            - cat ~/.ssh/id_rsa
            - echo "=== EC2의 SSH 키 스캔 ==="
            - ssh-keyscan -H "${SERVER_IP}" >> ~/.ssh/known_hosts
            - echo "=== Blue 컨테이너 중지 및 삭제 ==="
            - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker stop artfusion-blue"
            - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker rm artfusion-blue"
            - echo "=== SSH를 통해 Blue에 배포 ==="
            - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "docker-compose -f /home/ubuntu/artfusion-deployment/docker-compose.yml up -d artfusion-blue"
            - ssh -i ~/.ssh/id_rsa ubuntu@"${SERVER_IP}" "bash /home/ubuntu/artfusion-deployment/nginx_to_blue.sh"
            - wget --post-data '{"text":"Blue 컨테이너 배포 완료"}' --header="Content-Type:application/json" ${SLACK_WEBHOOK}
